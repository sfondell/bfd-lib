Sophia Fondell
CS 410: Assignment 0 - Task B - Stats

To calculate these statistics, I made a function in both getsections_dl.c and getsyms_dl.c called void calc_stats(int flag) that takes an integer flag signifying that the function dlopen() is supposed to be called with the flag RTLD_LAZY (flag = 0) or RTLD_NOW (flag = 1). The function then opens the dynamic library with this flag 50 times and records the time that it took to open the in CPU cycles and converts it to seconds by dividing it by the MHz of the CPU (2599.994). The function then converts this value to a character array using the function gcvt() and prints it to the screen using write. The function also sums each time together and at the end of the execution of the loop, divides the sum by 50 for the average and converts it to a character array and prints to the screen. I called calc_stats() in main() but when benchmark calculations are not being made, the function call can be commented out. The results for each flag and program are as follows:

-getsections_dl.c:

RTLD_LAZY:

0.4892319
0.3530777
0.2292313
0.2200005
0.2207697
0.221539
0.2200005
0.2200005
0.221539
0.2207697
0.221539
0.221539
0.2384621
0.2207697
0.2200005
0.2207697
0.2207697
0.221539
0.2207697
0.2246159
0.2376929
0.221539
0.2207697
0.2207697
0.2207697
0.221539
0.2200005
0.2223082
0.2200005
0.221539
0.221539
0.2246159
0.2200005
0.2238467
0.2207697
0.2207697
0.2200005
0.2207697
0.2200005
0.221539
0.221539
0.2238467
0.218462
0.2361544
0.221539
0.2207697
0.2192313
0.2246159
0.2200005
0.221539

Average time: 0.2303082

RTLD_NOW:

0.4700011
0.3657701
0.2707699
0.2707699
0.2707699
0.269616
0.269616
0.2719237
0.269616
0.2684622
0.2707699
0.2719237
0.2730775
0.2653852
0.269616
0.2665391
0.2719237
0.2676929
0.269616
0.2719237
0.2665391
0.2707699
0.2719237
0.2730775
0.2719237
0.2730775
0.2730775
0.2653852
0.2730775
0.2719237
0.269616
0.2684622
0.2707699
0.2665391
0.2707699
0.2653852
0.2707699
0.2707699
0.269616
0.2719237
0.2676929
0.2684622
0.2684622
0.2730775
0.2653852
0.2707699
0.2684622
0.2730775
0.2719237
0.2707699

Average time: 0.2759853

-getsyms_dl.c:

RTLD_LAZY:

0.519232
0.3315392
0.2253851
0.2261544
0.2223082
0.2207697
0.221539
0.2269236
0.2261544
0.2223082
0.221539
0.2261544
0.2192313
0.2223082
0.2207697
0.2269236
0.2207697
0.221539
0.2253851
0.221539
0.2207697
0.221539
0.2207697
0.2223082
0.221539
0.2223082
0.2223082
0.2230774
0.2207697
0.2230774
0.2223082
0.221539
0.2207697
0.221539
0.2207697
0.2223082
0.221539
0.221539
0.2207697
0.2230774
0.221539
0.221539
0.221539
0.2223082
0.2207697
0.221539
0.2223082
0.2253851
0.2246159
0.2238467

Average time: 0.2305697

RTLD_NOW:

0.5780783
0.4173087
0.2457698
0.2592314
0.2442313
0.2376929
0.2376929
0.2353852
0.236539
0.2376929
0.236539
0.2346159
0.2388467
0.2353852
0.2376929
0.2376929
0.2388467
0.2353852
0.2376929
0.2342313
0.2376929
0.2353852
0.236539
0.236539
0.2353852
0.2388467
0.2376929
0.2388467
0.2353852
0.2376929
0.2353852
0.2503852
0.2303852
0.2269236
0.2292313
0.2307698
0.2303852
0.2280775
0.2269236
0.2284621
0.2257698
0.2326928
0.2330775
0.2338467
0.2353852
0.2303852
0.2319236
0.2338467
0.2303852
0.2319236

Average time: 0.2460544

One can see that for both getsections_dl and getsyms_dl, loading all symbols when the library is dynamically loaded during execution (RTLD_NOW) takes slightly more time than loading symbols as they're needed (RTLD_LAZY).



